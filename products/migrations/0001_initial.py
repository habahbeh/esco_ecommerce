# Generated by Django 5.2.1 on 2025-05-29 19:04

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='اسم العلامة التجارية')),
                ('name_en', models.CharField(blank=True, max_length=200, verbose_name='Brand Name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=200, unique=True, verbose_name='معرف URL')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/', verbose_name='الشعار')),
                ('website', models.URLField(blank=True, verbose_name='الموقع الإلكتروني')),
                ('description', models.TextField(blank=True, verbose_name='الوصف')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='بلد المنشأ')),
                ('is_featured', models.BooleanField(default=False, verbose_name='مميز')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('order', models.IntegerField(default=0, verbose_name='الترتيب')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
            ],
            options={
                'verbose_name': 'علامة تجارية',
                'verbose_name_plural': 'العلامات التجارية',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='اسم الوسم')),
                ('slug', models.SlugField(allow_unicode=True, unique=True, verbose_name='معرف URL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
            ],
            options={
                'verbose_name': 'وسم',
                'verbose_name_plural': 'الوسوم',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='اسم الفئة - على الأقل حرفين', max_length=200, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='اسم الفئة')),
                ('name_en', models.CharField(blank=True, help_text='English category name (optional)', max_length=200, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Category Name (English)')),
                ('slug', models.SlugField(allow_unicode=True, help_text='معرف فريد للرابط', max_length=200, unique=True, verbose_name='معرف URL')),
                ('description', models.TextField(blank=True, help_text='وصف الفئة', validators=[django.core.validators.MinLengthValidator(10)], verbose_name='الوصف')),
                ('description_en', models.TextField(blank=True, help_text='English description (optional)', validators=[django.core.validators.MinLengthValidator(10)], verbose_name='Description (English)')),
                ('level', models.PositiveIntegerField(default=0, editable=False, help_text='مستوى الفئة في الهيكل الشجري', verbose_name='المستوى')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='ترتيب الفئة في العرض', verbose_name='ترتيب العرض')),
                ('image', models.ImageField(blank=True, help_text='صورة تمثيلية للفئة', null=True, upload_to='categories/', verbose_name='صورة الفئة')),
                ('icon', models.CharField(blank=True, help_text='CSS class للأيقونة (مثل: fas fa-laptop)', max_length=100, verbose_name='أيقونة الفئة')),
                ('color', models.CharField(blank=True, help_text='لون سداسي عشري للفئة (مثل: #FF5733)', max_length=7, verbose_name='لون الفئة')),
                ('meta_title', models.CharField(blank=True, help_text='عنوان الصفحة لمحركات البحث', max_length=200, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='عنوان SEO')),
                ('meta_description', models.TextField(blank=True, help_text='وصف الصفحة لمحركات البحث', max_length=160, validators=[django.core.validators.MinLengthValidator(20)], verbose_name='وصف SEO')),
                ('meta_keywords', models.CharField(blank=True, help_text='كلمات مفتاحية مفصولة بفواصل', max_length=500, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='كلمات مفتاحية SEO')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('is_featured', models.BooleanField(default=False, help_text='عرض في الصفحة الرئيسية', verbose_name='فئة مميزة')),
                ('show_in_menu', models.BooleanField(default=True, help_text='عرض في قائمة التنقل الرئيسية', verbose_name='عرض في القائمة')),
                ('products_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='عدد المنتجات')),
                ('views_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='عدد المشاهدات')),
                ('commission_rate', models.DecimalField(decimal_places=2, default=0, help_text='نسبة العمولة على مبيعات هذه الفئة', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='نسبة العمولة')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_categories', to=settings.AUTH_USER_MODEL, verbose_name='أنشئ بواسطة')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.category', verbose_name='الفئة الأب')),
            ],
            options={
                'verbose_name': 'فئة',
                'verbose_name_plural': 'الفئات',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='يجب أن يكون اسم المنتج على الأقل حرفين', max_length=500, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='اسم المنتج')),
                ('name_en', models.CharField(blank=True, help_text='English product name (optional)', max_length=500, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Product Name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=500, unique=True, verbose_name='معرف URL')),
                ('sku', models.CharField(help_text='رقم المنتج الفريد - على الأقل 3 أحرف', max_length=100, unique=True, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='رقم المنتج')),
                ('barcode', models.CharField(blank=True, help_text='الباركود - على الأقل 8 أرقام', max_length=100, validators=[django.core.validators.MinLengthValidator(8)], verbose_name='الباركود')),
                ('short_description', models.TextField(blank=True, help_text='وصف مختصر للمنتج - على الأقل 10 أحرف', max_length=500, validators=[django.core.validators.MinLengthValidator(10)], verbose_name='وصف مختصر')),
                ('short_description_en', models.TextField(blank=True, help_text='Short English description (optional)', max_length=500, validators=[django.core.validators.MinLengthValidator(10)], verbose_name='Short Description')),
                ('description', models.TextField(help_text='وصف مفصل للمنتج - على الأقل 20 حرف', validators=[django.core.validators.MinLengthValidator(20)], verbose_name='الوصف الكامل')),
                ('description_en', models.TextField(blank=True, help_text='Full English description (optional)', validators=[django.core.validators.MinLengthValidator(20)], verbose_name='Full Description')),
                ('specifications', models.JSONField(blank=True, default=dict, verbose_name='المواصفات')),
                ('base_price', models.DecimalField(decimal_places=2, help_text='السعر الأساسي قبل الخصم', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='السعر الأساسي')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, help_text='نسبة الخصم من 0 إلى 100%', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='نسبة الخصم')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, help_text='مبلغ الخصم المباشر', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='مبلغ الخصم')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=16, help_text='نسبة الضريبة المضافة', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='نسبة الضريبة')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='تكلفة المنتج (اختياري)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='التكلفة')),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='الكمية الحالية في المخزون', verbose_name='الكمية المتوفرة')),
                ('stock_status', models.CharField(choices=[('in_stock', 'متوفر'), ('out_of_stock', 'غير متوفر'), ('pre_order', 'طلب مسبق')], default='in_stock', max_length=20, verbose_name='حالة المخزون')),
                ('min_stock_level', models.PositiveIntegerField(default=5, help_text='الحد الأدنى للتنبيه عند نفاد المخزون', validators=[django.core.validators.MinValueValidator(1)], verbose_name='الحد الأدنى للمخزون')),
                ('max_order_quantity', models.PositiveIntegerField(default=100, help_text='أقصى كمية يمكن طلبها في مرة واحدة', validators=[django.core.validators.MinValueValidator(1)], verbose_name='الحد الأقصى للطلب')),
                ('track_inventory', models.BooleanField(default=True, help_text='تفعيل/إلغاء تتبع المخزون', verbose_name='تتبع المخزون')),
                ('weight', models.DecimalField(blank=True, decimal_places=3, help_text='وزن المنتج بالكيلوجرام', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='الوزن (كجم)')),
                ('length', models.DecimalField(blank=True, decimal_places=2, help_text='طول المنتج بالسنتيمتر', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='الطول (سم)')),
                ('width', models.DecimalField(blank=True, decimal_places=2, help_text='عرض المنتج بالسنتيمتر', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='العرض (سم)')),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='ارتفاع المنتج بالسنتيمتر', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='الارتفاع (سم)')),
                ('is_featured', models.BooleanField(default=False, verbose_name='منتج مميز')),
                ('is_new', models.BooleanField(default=True, verbose_name='منتج جديد')),
                ('is_best_seller', models.BooleanField(default=False, verbose_name='الأكثر مبيعاً')),
                ('is_digital', models.BooleanField(default=False, verbose_name='منتج رقمي')),
                ('requires_shipping', models.BooleanField(default=True, verbose_name='يتطلب شحن')),
                ('status', models.CharField(choices=[('draft', 'مسودة'), ('published', 'منشور'), ('archived', 'مؤرشف')], default='draft', max_length=20, verbose_name='الحالة')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('show_price', models.BooleanField(default=True, verbose_name='عرض السعر')),
                ('meta_title', models.CharField(blank=True, help_text='عنوان الصفحة لمحركات البحث', max_length=200, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='عنوان SEO')),
                ('meta_description', models.TextField(blank=True, help_text='وصف الصفحة لمحركات البحث', max_length=160, validators=[django.core.validators.MinLengthValidator(20)], verbose_name='وصف SEO')),
                ('meta_keywords', models.CharField(blank=True, help_text='كلمات مفتاحية مفصولة بفواصل', max_length=500, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='كلمات مفتاحية SEO')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='عدد المشاهدات')),
                ('sales_count', models.PositiveIntegerField(default=0, verbose_name='عدد المبيعات')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='تاريخ النشر')),
                ('discount_start', models.DateTimeField(blank=True, null=True, verbose_name='بداية الخصم')),
                ('discount_end', models.DateTimeField(blank=True, null=True, verbose_name='نهاية الخصم')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='products.brand', verbose_name='العلامة التجارية')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='products.category', verbose_name='الفئة')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_products', to=settings.AUTH_USER_MODEL, verbose_name='أنشئ بواسطة')),
                ('related_products', models.ManyToManyField(blank=True, to='products.product', verbose_name='منتجات ذات صلة')),
                ('tags', models.ManyToManyField(blank=True, related_name='products', to='products.tag', verbose_name='الوسوم')),
            ],
            options={
                'verbose_name': 'منتج',
                'verbose_name_plural': 'المنتجات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=100, verbose_name='معرف الجلسة')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('products', models.ManyToManyField(related_name='comparisons', to='products.product')),
            ],
            options={
                'verbose_name': 'مقارنة منتجات',
                'verbose_name_plural': 'مقارنات المنتجات',
            },
        ),
        migrations.CreateModel(
            name='ProductDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='اسم واضح للخصم', max_length=200, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='اسم الخصم')),
                ('description', models.TextField(blank=True, help_text='وصف تفصيلي للخصم', validators=[django.core.validators.MinLengthValidator(10)], verbose_name='وصف الخصم')),
                ('code', models.CharField(blank=True, help_text='كود فريد للخصم (اختياري)', max_length=50, unique=True, verbose_name='كود الخصم')),
                ('discount_type', models.CharField(choices=[('percentage', 'نسبة مئوية'), ('fixed_amount', 'مبلغ ثابت'), ('buy_x_get_y', 'اشتري X واحصل على Y'), ('quantity_based', 'خصم حسب الكمية')], default='percentage', max_length=20, verbose_name='نوع الخصم')),
                ('value', models.DecimalField(decimal_places=2, help_text='قيمة الخصم (نسبة أو مبلغ)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='قيمة الخصم')),
                ('max_discount_amount', models.DecimalField(blank=True, decimal_places=2, help_text='الحد الأقصى لمبلغ الخصم (للنسبة المئوية)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='الحد الأقصى لمبلغ الخصم')),
                ('application_type', models.CharField(choices=[('all_products', 'جميع المنتجات'), ('category', 'فئة محددة'), ('specific_products', 'منتجات محددة')], default='all_products', max_length=20, verbose_name='نوع التطبيق')),
                ('start_date', models.DateTimeField(help_text='تاريخ ووقت بداية الخصم', verbose_name='تاريخ البداية')),
                ('end_date', models.DateTimeField(blank=True, help_text='تاريخ ووقت نهاية الخصم (اختياري)', null=True, verbose_name='تاريخ النهاية')),
                ('min_purchase_amount', models.DecimalField(decimal_places=2, default=0, help_text='الحد الأدنى لمبلغ الشراء لتطبيق الخصم', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='الحد الأدنى للشراء')),
                ('min_quantity', models.PositiveIntegerField(default=1, help_text='الحد الأدنى للكمية لتطبيق الخصم', validators=[django.core.validators.MinValueValidator(1)], verbose_name='الحد الأدنى للكمية')),
                ('max_uses', models.PositiveIntegerField(blank=True, help_text='الحد الأقصى لعدد مرات الاستخدام', null=True, verbose_name='الحد الأقصى للاستخدام')),
                ('max_uses_per_user', models.PositiveIntegerField(blank=True, help_text='الحد الأقصى للاستخدام لكل مستخدم', null=True, verbose_name='الحد الأقصى للاستخدام لكل مستخدم')),
                ('used_count', models.PositiveIntegerField(default=0, verbose_name='عدد مرات الاستخدام')),
                ('buy_quantity', models.PositiveIntegerField(blank=True, help_text='الكمية المطلوب شراؤها', null=True, verbose_name='اشتري كمية')),
                ('get_quantity', models.PositiveIntegerField(blank=True, help_text='الكمية المجانية', null=True, verbose_name='احصل على كمية')),
                ('get_discount_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='نسبة الخصم على الكمية المجانية', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='نسبة خصم الكمية المجانية')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('is_stackable', models.BooleanField(default=False, help_text='هل يمكن تطبيق هذا الخصم مع خصومات أخرى؟', verbose_name='قابل للتراكم')),
                ('requires_coupon_code', models.BooleanField(default=False, help_text='هل يتطلب إدخال كود للحصول على الخصم؟', verbose_name='يتطلب كود خصم')),
                ('priority', models.PositiveIntegerField(default=0, help_text='أولوية تطبيق الخصم (رقم أعلى = أولوية أكبر)', verbose_name='الأولوية')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discounts', to='products.category', verbose_name='الفئة')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_discounts', to=settings.AUTH_USER_MODEL, verbose_name='أنشئ بواسطة')),
                ('products', models.ManyToManyField(blank=True, related_name='specific_discounts', to='products.product', verbose_name='المنتجات المحددة')),
            ],
            options={
                'verbose_name': 'خصم المنتج',
                'verbose_name_plural': 'خصومات المنتجات',
                'ordering': ['-priority', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/%Y/%m/', verbose_name='الصورة')),
                ('alt_text', models.CharField(blank=True, max_length=200, verbose_name='النص البديل')),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='التسمية التوضيحية')),
                ('is_primary', models.BooleanField(default=False, verbose_name='صورة رئيسية')),
                ('order', models.IntegerField(default=0, verbose_name='الترتيب')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإضافة')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product', verbose_name='المنتج')),
            ],
            options={
                'verbose_name': 'صورة منتج',
                'verbose_name_plural': 'صور المنتجات',
                'ordering': ['order', '-is_primary'],
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='التقييم')),
                ('title', models.CharField(max_length=200, verbose_name='عنوان التقييم')),
                ('comment', models.TextField(verbose_name='التعليق')),
                ('image1', models.ImageField(blank=True, null=True, upload_to='reviews/', verbose_name='صورة 1')),
                ('image2', models.ImageField(blank=True, null=True, upload_to='reviews/', verbose_name='صورة 2')),
                ('image3', models.ImageField(blank=True, null=True, upload_to='reviews/', verbose_name='صورة 3')),
                ('is_approved', models.BooleanField(default=False, verbose_name='معتمد')),
                ('is_featured', models.BooleanField(default=False, verbose_name='مميز')),
                ('helpful_count', models.PositiveIntegerField(default=0, verbose_name='مفيد')),
                ('not_helpful_count', models.PositiveIntegerField(default=0, verbose_name='غير مفيد')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product', verbose_name='المنتج')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_reviews', to=settings.AUTH_USER_MODEL, verbose_name='المستخدم')),
            ],
            options={
                'verbose_name': 'تقييم منتج',
                'verbose_name_plural': 'تقييمات المنتجات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='اسم واضح للمتغير', max_length=200, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='اسم المتغير')),
                ('sku', models.CharField(help_text='رقم فريد للمتغير', max_length=100, unique=True, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='رقم المتغير')),
                ('color', models.CharField(blank=True, choices=[('red', 'أحمر'), ('blue', 'أزرق'), ('green', 'أخضر'), ('yellow', 'أصفر'), ('black', 'أسود'), ('white', 'أبيض'), ('gray', 'رمادي'), ('brown', 'بني'), ('pink', 'وردي'), ('purple', 'بنفسجي'), ('orange', 'برتقالي'), ('navy', 'كحلي')], help_text='لون المتغير', max_length=50, verbose_name='اللون')),
                ('color_code', models.CharField(blank=True, help_text='كود اللون السداسي عشري (مثل: #FF5733)', max_length=7, verbose_name='كود اللون')),
                ('size', models.CharField(blank=True, choices=[('xs', 'XS - صغير جداً'), ('s', 'S - صغير'), ('m', 'M - متوسط'), ('l', 'L - كبير'), ('xl', 'XL - كبير جداً'), ('xxl', 'XXL - كبير جداً جداً'), ('xxxl', 'XXXL - كبير جداً جداً جداً')], help_text='حجم المتغير', max_length=20, verbose_name='الحجم')),
                ('material', models.CharField(blank=True, help_text='مادة صنع المتغير', max_length=100, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='المادة')),
                ('pattern', models.CharField(blank=True, help_text='نقشة أو تصميم المتغير', max_length=100, verbose_name='النقشة/التصميم')),
                ('custom_attributes', models.JSONField(blank=True, default=dict, help_text='خصائص إضافية مخصصة للمتغير', verbose_name='خصائص مخصصة')),
                ('price_adjustment', models.DecimalField(decimal_places=2, default=0, help_text='تعديل السعر بالإضافة أو الطرح من السعر الأساسي', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('-999999.99'))], verbose_name='تعديل السعر')),
                ('cost_adjustment', models.DecimalField(decimal_places=2, default=0, help_text='تعديل التكلفة بالإضافة أو الطرح من التكلفة الأساسية', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('-999999.99'))], verbose_name='تعديل التكلفة')),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='الكمية المتوفرة من هذا المتغير', verbose_name='الكمية المتوفرة')),
                ('reserved_quantity', models.PositiveIntegerField(default=0, help_text='الكمية المحجوزة في طلبات معلقة', verbose_name='الكمية المحجوزة')),
                ('min_stock_level', models.PositiveIntegerField(default=5, help_text='الحد الأدنى للتنبيه عند نفاد المخزون', validators=[django.core.validators.MinValueValidator(1)], verbose_name='الحد الأدنى للمخزون')),
                ('weight', models.DecimalField(blank=True, decimal_places=3, help_text='وزن هذا المتغير بالكيلوجرام', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='الوزن (كجم)')),
                ('length', models.DecimalField(blank=True, decimal_places=2, help_text='طول هذا المتغير بالسنتيمتر', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='الطول (سم)')),
                ('width', models.DecimalField(blank=True, decimal_places=2, help_text='عرض هذا المتغير بالسنتيمتر', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='العرض (سم)')),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='ارتفاع هذا المتغير بالسنتيمتر', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='الارتفاع (سم)')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('is_default', models.BooleanField(default=False, help_text='هل هذا هو المتغير الافتراضي للمنتج؟', verbose_name='المتغير الافتراضي')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='ترتيب المتغير في العرض', verbose_name='ترتيب العرض')),
                ('sales_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='عدد المبيعات')),
                ('views_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='عدد المشاهدات')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.product', verbose_name='المنتج')),
            ],
            options={
                'verbose_name': 'متغير المنتج',
                'verbose_name_plural': 'متغيرات المنتجات',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإضافة')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlisted_by', to='products.product', verbose_name='المنتج')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to=settings.AUTH_USER_MODEL, verbose_name='المستخدم')),
            ],
            options={
                'verbose_name': 'قائمة أمنيات',
                'verbose_name_plural': 'قوائم الأمنيات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['slug'], name='products_ca_slug_da4386_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent', 'is_active'], name='products_ca_parent__1cafc9_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['is_active', 'is_featured'], name='products_ca_is_acti_60a61c_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['level'], name='products_ca_level_e171a7_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['sort_order'], name='products_ca_sort_or_c50e68_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('parent', 'name')},
        ),
        migrations.AddIndex(
            model_name='productdiscount',
            index=models.Index(fields=['is_active', 'start_date', 'end_date'], name='products_pr_is_acti_13ee7b_idx'),
        ),
        migrations.AddIndex(
            model_name='productdiscount',
            index=models.Index(fields=['code'], name='products_pr_code_6c85ea_idx'),
        ),
        migrations.AddIndex(
            model_name='productdiscount',
            index=models.Index(fields=['category'], name='products_pr_categor_12b36b_idx'),
        ),
        migrations.AddIndex(
            model_name='productdiscount',
            index=models.Index(fields=['priority'], name='products_pr_priorit_9be6b2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productreview',
            unique_together={('product', 'user')},
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'is_active'], name='products_pr_product_66459e_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['sku'], name='products_pr_sku_dcab68_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['color', 'size'], name='products_pr_color_6ff73b_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['is_default'], name='products_pr_is_defa_953ac2_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['stock_quantity'], name='products_pr_stock_q_989677_idx'),
        ),
        migrations.AddConstraint(
            model_name='productvariant',
            constraint=models.CheckConstraint(condition=models.Q(('stock_quantity__gte', 0)), name='non_negative_variant_stock'),
        ),
        migrations.AddConstraint(
            model_name='productvariant',
            constraint=models.CheckConstraint(condition=models.Q(('reserved_quantity__gte', 0)), name='non_negative_reserved_quantity'),
        ),
        migrations.AddConstraint(
            model_name='productvariant',
            constraint=models.CheckConstraint(condition=models.Q(('reserved_quantity__lte', models.F('stock_quantity'))), name='reserved_not_exceed_stock'),
        ),
        migrations.AlterUniqueTogether(
            name='productvariant',
            unique_together={('product', 'color', 'size'), ('sku',)},
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['slug'], name='products_pr_slug_3edc0c_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='products_pr_sku_ca0cdc_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'is_active'], name='products_pr_status_c4a457_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'brand'], name='products_pr_categor_1e5c3d_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['-sales_count'], name='products_pr_sales_c_6796bf_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['-views_count'], name='products_pr_views_c_7a5fbb_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['barcode'], name='products_pr_barcode_e44f4f_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['created_at'], name='products_pr_created_52f0d7_idx'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('base_price__gt', 0)), name='positive_base_price'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('stock_quantity__gte', 0)), name='non_negative_stock'),
        ),
        migrations.AlterUniqueTogether(
            name='wishlist',
            unique_together={('user', 'product')},
        ),
    ]
