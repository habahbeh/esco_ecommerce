# Generated by Django 5.2.1 on 2025-05-31 11:34

import django.core.validators
import django.db.models.deletion
import products.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('meta_title', models.CharField(blank=True, help_text='عنوان الصفحة لمحركات البحث', max_length=200, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='عنوان SEO')),
                ('meta_description', models.TextField(blank=True, help_text='وصف الصفحة لمحركات البحث', max_length=160, validators=[django.core.validators.MinLengthValidator(20)], verbose_name='وصف SEO')),
                ('meta_keywords', models.CharField(blank=True, help_text='كلمات مفتاحية مفصولة بفواصل', max_length=500, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='كلمات مفتاحية SEO')),
                ('name', models.CharField(max_length=200, verbose_name='اسم العلامة التجارية')),
                ('name_en', models.CharField(blank=True, max_length=200, verbose_name='Brand Name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=200, unique=True, verbose_name='معرف URL')),
                ('logo', models.ImageField(blank=True, null=True, upload_to=products.models.upload_brand_logo, verbose_name='الشعار')),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to=products.models.upload_brand_logo, verbose_name='صورة البانر')),
                ('website', models.URLField(blank=True, verbose_name='الموقع الإلكتروني')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='البريد الإلكتروني')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='رقم الهاتف')),
                ('description', models.TextField(blank=True, verbose_name='الوصف')),
                ('history', models.TextField(blank=True, verbose_name='تاريخ العلامة')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='بلد المنشأ')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='المدينة')),
                ('is_featured', models.BooleanField(default=False, verbose_name='مميز')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('is_verified', models.BooleanField(default=False, verbose_name='موثق')),
                ('sort_order', models.IntegerField(default=0, verbose_name='الترتيب')),
                ('social_links', models.JSONField(blank=True, default=dict, verbose_name='روابط التواصل')),
                ('products_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='عدد المنتجات')),
                ('views_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='عدد المشاهدات')),
                ('rating', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=3, verbose_name='التقييم')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_brands', to=settings.AUTH_USER_MODEL, verbose_name='أنشئ بواسطة')),
            ],
            options={
                'verbose_name': 'علامة تجارية',
                'verbose_name_plural': 'العلامات التجارية',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('meta_title', models.CharField(blank=True, help_text='عنوان الصفحة لمحركات البحث', max_length=200, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='عنوان SEO')),
                ('meta_description', models.TextField(blank=True, help_text='وصف الصفحة لمحركات البحث', max_length=160, validators=[django.core.validators.MinLengthValidator(20)], verbose_name='وصف SEO')),
                ('meta_keywords', models.CharField(blank=True, help_text='كلمات مفتاحية مفصولة بفواصل', max_length=500, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='كلمات مفتاحية SEO')),
                ('name', models.CharField(help_text='اسم الفئة - على الأقل حرفين', max_length=200, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='اسم الفئة')),
                ('name_en', models.CharField(blank=True, help_text='English category name (optional)', max_length=200, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Category Name (English)')),
                ('slug', models.SlugField(allow_unicode=True, help_text='معرف فريد للرابط', max_length=200, unique=True, verbose_name='معرف URL')),
                ('description', models.TextField(blank=True, help_text='وصف الفئة', validators=[django.core.validators.MinLengthValidator(10)], verbose_name='الوصف')),
                ('description_en', models.TextField(blank=True, help_text='English description (optional)', validators=[django.core.validators.MinLengthValidator(10)], verbose_name='Description (English)')),
                ('level', models.PositiveIntegerField(default=0, editable=False, help_text='مستوى الفئة في الهيكل الشجري', verbose_name='المستوى')),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='ترتيب الفئة في العرض', verbose_name='ترتيب العرض')),
                ('image', models.ImageField(blank=True, help_text='صورة تمثيلية للفئة', null=True, upload_to=products.models.upload_category_image, verbose_name='صورة الفئة')),
                ('icon', models.CharField(blank=True, help_text='CSS class للأيقونة (مثل: fas fa-laptop)', max_length=100, verbose_name='أيقونة الفئة')),
                ('color', models.CharField(blank=True, help_text='لون سداسي عشري للفئة (مثل: #FF5733)', max_length=7, verbose_name='لون الفئة')),
                ('banner_image', models.ImageField(blank=True, help_text='صورة بانر للفئة', null=True, upload_to=products.models.upload_category_image, verbose_name='صورة البانر')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('is_featured', models.BooleanField(default=False, help_text='عرض في الصفحة الرئيسية', verbose_name='فئة مميزة')),
                ('show_in_menu', models.BooleanField(default=True, help_text='عرض في قائمة التنقل الرئيسية', verbose_name='عرض في القائمة')),
                ('show_prices', models.BooleanField(default=True, help_text='عرض أسعار المنتجات في هذه الفئة', verbose_name='عرض الأسعار')),
                ('products_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='عدد المنتجات')),
                ('views_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='عدد المشاهدات')),
                ('commission_rate', models.DecimalField(decimal_places=2, default=0, help_text='نسبة العمولة على مبيعات هذه الفئة', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='نسبة العمولة')),
                ('content_blocks', models.JSONField(blank=True, default=dict, help_text='محتوى إضافي للفئة', verbose_name='كتل المحتوى')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_categories', to=settings.AUTH_USER_MODEL, verbose_name='أنشئ بواسطة')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.category', verbose_name='الفئة الأب')),
            ],
            options={
                'verbose_name': 'فئة',
                'verbose_name_plural': 'الفئات',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('meta_title', models.CharField(blank=True, help_text='عنوان الصفحة لمحركات البحث', max_length=200, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='عنوان SEO')),
                ('meta_description', models.TextField(blank=True, help_text='وصف الصفحة لمحركات البحث', max_length=160, validators=[django.core.validators.MinLengthValidator(20)], verbose_name='وصف SEO')),
                ('meta_keywords', models.CharField(blank=True, help_text='كلمات مفتاحية مفصولة بفواصل', max_length=500, validators=[django.core.validators.MinLengthValidator(5)], verbose_name='كلمات مفتاحية SEO')),
                ('name', models.CharField(help_text='يجب أن يكون اسم المنتج على الأقل حرفين', max_length=500, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='اسم المنتج')),
                ('name_en', models.CharField(blank=True, help_text='English product name (optional)', max_length=500, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Product Name')),
                ('slug', models.SlugField(allow_unicode=True, max_length=500, unique=True, verbose_name='معرف URL')),
                ('sku', models.CharField(help_text='رقم المنتج الفريد - على الأقل 3 أحرف', max_length=100, unique=True, validators=[django.core.validators.MinLengthValidator(3)], verbose_name='رقم المنتج')),
                ('barcode', models.CharField(blank=True, help_text='الباركود - على الأقل 8 أرقام', max_length=100, validators=[django.core.validators.MinLengthValidator(8)], verbose_name='الباركود')),
                ('short_description', models.TextField(blank=True, help_text='وصف مختصر للمنتج - على الأقل 10 أحرف', max_length=500, validators=[django.core.validators.MinLengthValidator(10)], verbose_name='وصف مختصر')),
                ('description', models.TextField(help_text='وصف مفصل للمنتج - على الأقل 20 حرف', validators=[django.core.validators.MinLengthValidator(20)], verbose_name='الوصف الكامل')),
                ('specifications', models.JSONField(blank=True, default=dict, verbose_name='المواصفات')),
                ('features', models.JSONField(blank=True, default=list, verbose_name='الميزات')),
                ('base_price', models.DecimalField(decimal_places=2, help_text='السعر الأساسي قبل الخصم', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='السعر الأساسي')),
                ('compare_price', models.DecimalField(blank=True, decimal_places=2, help_text='السعر للمقارنة (قبل الخصم)', max_digits=10, null=True, verbose_name='سعر المقارنة')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='تكلفة المنتج (اختياري)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='التكلفة')),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0, help_text='نسبة الخصم من 0 إلى 100%', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='نسبة الخصم')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, help_text='مبلغ الخصم المباشر', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='مبلغ الخصم')),
                ('discount_start', models.DateTimeField(blank=True, null=True, verbose_name='بداية الخصم')),
                ('discount_end', models.DateTimeField(blank=True, null=True, verbose_name='نهاية الخصم')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=16, help_text='نسبة الضريبة المضافة', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='نسبة الضريبة')),
                ('tax_class', models.CharField(blank=True, help_text='فئة الضريبة للمنتج', max_length=50, verbose_name='فئة الضريبة')),
                ('stock_quantity', models.PositiveIntegerField(default=0, help_text='الكمية الحالية في المخزون', verbose_name='الكمية المتوفرة')),
                ('reserved_quantity', models.PositiveIntegerField(default=0, help_text='الكمية المحجوزة في طلبات معلقة', verbose_name='الكمية المحجوزة')),
                ('stock_status', models.CharField(choices=[('in_stock', 'متوفر'), ('out_of_stock', 'غير متوفر'), ('pre_order', 'طلب مسبق'), ('discontinued', 'متوقف')], default='in_stock', max_length=20, verbose_name='حالة المخزون')),
                ('min_stock_level', models.PositiveIntegerField(default=5, help_text='الحد الأدنى للتنبيه عند نفاد المخزون', validators=[django.core.validators.MinValueValidator(1)], verbose_name='الحد الأدنى للمخزون')),
                ('max_order_quantity', models.PositiveIntegerField(default=100, help_text='أقصى كمية يمكن طلبها في مرة واحدة', validators=[django.core.validators.MinValueValidator(1)], verbose_name='الحد الأقصى للطلب')),
                ('track_inventory', models.BooleanField(default=True, help_text='تفعيل/إلغاء تتبع المخزون', verbose_name='تتبع المخزون')),
                ('weight', models.DecimalField(blank=True, decimal_places=3, help_text='وزن المنتج بالكيلوجرام', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='الوزن (كجم)')),
                ('length', models.DecimalField(blank=True, decimal_places=2, help_text='طول المنتج بالسنتيمتر', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='الطول (سم)')),
                ('width', models.DecimalField(blank=True, decimal_places=2, help_text='عرض المنتج بالسنتيمتر', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='العرض (سم)')),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='ارتفاع المنتج بالسنتيمتر', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='الارتفاع (سم)')),
                ('condition', models.CharField(choices=[('new', 'جديد'), ('refurbished', 'مجدد'), ('used', 'مستعمل')], default='new', max_length=20, verbose_name='حالة المنتج')),
                ('is_featured', models.BooleanField(default=False, verbose_name='منتج مميز')),
                ('is_new', models.BooleanField(default=True, verbose_name='منتج جديد')),
                ('is_best_seller', models.BooleanField(default=False, verbose_name='الأكثر مبيعاً')),
                ('is_digital', models.BooleanField(default=False, verbose_name='منتج رقمي')),
                ('requires_shipping', models.BooleanField(default=True, verbose_name='يتطلب شحن')),
                ('is_gift_card', models.BooleanField(default=False, verbose_name='بطاقة هدية')),
                ('available_for_preorder', models.BooleanField(default=False, verbose_name='متاح للطلب المسبق')),
                ('preorder_message', models.CharField(blank=True, max_length=200, verbose_name='رسالة الطلب المسبق')),
                ('warranty_period', models.CharField(blank=True, help_text='مثل: سنة واحدة، 6 أشهر', max_length=50, verbose_name='فترة الضمان')),
                ('warranty_details', models.TextField(blank=True, verbose_name='تفاصيل الضمان')),
                ('status', models.CharField(choices=[('draft', 'مسودة'), ('published', 'منشور'), ('archived', 'مؤرشف'), ('pending_review', 'قيد المراجعة')], default='draft', max_length=20, verbose_name='الحالة')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('show_price', models.BooleanField(default=True, verbose_name='عرض السعر')),
                ('allow_reviews', models.BooleanField(default=True, verbose_name='السماح بالتقييمات')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='عدد المشاهدات')),
                ('sales_count', models.PositiveIntegerField(default=0, verbose_name='عدد المبيعات')),
                ('wishlist_count', models.PositiveIntegerField(default=0, verbose_name='عدد قوائم الأمنيات')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='تاريخ النشر')),
                ('featured_until', models.DateTimeField(blank=True, null=True, verbose_name='مميز حتى')),
                ('search_keywords', models.TextField(blank=True, verbose_name='كلمات البحث')),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='products.brand', verbose_name='العلامة التجارية')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='products', to='products.category', verbose_name='الفئة')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_products', to=settings.AUTH_USER_MODEL, verbose_name='أنشئ بواسطة')),
                ('cross_sell_products', models.ManyToManyField(blank=True, related_name='cross_sold_by', to='products.product', verbose_name='منتجات البيع المتقاطع')),
                ('related_products', models.ManyToManyField(blank=True, to='products.product', verbose_name='منتجات ذات صلة')),
                ('upsell_products', models.ManyToManyField(blank=True, related_name='upsold_by', to='products.product', verbose_name='منتجات البيع التصاعدي')),
            ],
            options={
                'verbose_name': 'منتج',
                'verbose_name_plural': 'المنتجات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('name', models.CharField(max_length=100, verbose_name='اسم الخاصية')),
                ('name_en', models.CharField(blank=True, max_length=100, verbose_name='Attribute Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='معرف URL')),
                ('attribute_type', models.CharField(choices=[('text', 'نص'), ('number', 'رقم'), ('boolean', 'صح/خطأ'), ('select', 'اختيار واحد'), ('multiselect', 'اختيار متعدد'), ('color', 'لون'), ('date', 'تاريخ')], default='text', max_length=20, verbose_name='نوع الخاصية')),
                ('options', models.JSONField(blank=True, default=list, help_text='خيارات الاختيار للخصائص من نوع select', verbose_name='الخيارات')),
                ('is_required', models.BooleanField(default=False, verbose_name='مطلوب')),
                ('is_filterable', models.BooleanField(default=True, verbose_name='قابل للفلترة')),
                ('is_searchable', models.BooleanField(default=False, verbose_name='قابل للبحث')),
                ('sort_order', models.IntegerField(default=0, verbose_name='الترتيب')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('categories', models.ManyToManyField(blank=True, related_name='attributes', to='products.category', verbose_name='الفئات')),
            ],
            options={
                'verbose_name': 'خاصية منتج',
                'verbose_name_plural': 'خصائص المنتجات',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductAttributeValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('value', models.TextField(verbose_name='القيمة')),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='products.productattribute', verbose_name='الخاصية')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attribute_values', to='products.product', verbose_name='المنتج')),
            ],
            options={
                'verbose_name': 'قيمة خاصية منتج',
                'verbose_name_plural': 'قيم خصائص المنتجات',
            },
        ),
        migrations.CreateModel(
            name='ProductComparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('session_key', models.CharField(help_text='مفتاح جلسة المستخدم', max_length=40, verbose_name='مفتاح الجلسة')),
                ('is_public', models.BooleanField(default=False, verbose_name='مقارنة عامة')),
                ('name', models.CharField(blank=True, max_length=200, verbose_name='اسم المقارنة')),
                ('products', models.ManyToManyField(related_name='compared_in', to='products.product', verbose_name='المنتجات')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_comparisons', to=settings.AUTH_USER_MODEL, verbose_name='المستخدم')),
            ],
            options={
                'verbose_name': 'مقارنة منتجات',
                'verbose_name_plural': 'مقارنات المنتجات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('name', models.CharField(help_text='اسم وصفي للخصم', max_length=200, verbose_name='اسم الخصم')),
                ('description', models.TextField(blank=True, help_text='وصف تفصيلي للخصم', verbose_name='وصف الخصم')),
                ('code', models.CharField(blank=True, help_text='كود الخصم للعملاء (اختياري)', max_length=50, null=True, unique=True, verbose_name='كود الخصم')),
                ('discount_type', models.CharField(choices=[('percentage', 'نسبة مئوية'), ('fixed_amount', 'مبلغ ثابت'), ('buy_x_get_y', 'اشتري X واحصل على Y'), ('free_shipping', 'شحن مجاني')], default='percentage', max_length=20, verbose_name='نوع الخصم')),
                ('value', models.DecimalField(decimal_places=2, help_text='نسبة الخصم أو المبلغ الثابت', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='قيمة الخصم')),
                ('max_discount_amount', models.DecimalField(blank=True, decimal_places=2, help_text='الحد الأقصى لمبلغ الخصم (للنسبة المئوية)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='الحد الأقصى للخصم')),
                ('application_type', models.CharField(choices=[('all_products', 'جميع المنتجات'), ('category', 'فئة محددة'), ('specific_products', 'منتجات محددة'), ('minimum_purchase', 'حد أدنى للشراء')], default='all_products', max_length=20, verbose_name='نوع التطبيق')),
                ('start_date', models.DateTimeField(help_text='تاريخ بداية الخصم', verbose_name='تاريخ البداية')),
                ('end_date', models.DateTimeField(blank=True, help_text='تاريخ نهاية الخصم (اختياري)', null=True, verbose_name='تاريخ النهاية')),
                ('min_purchase_amount', models.DecimalField(blank=True, decimal_places=2, help_text='الحد الأدنى لمبلغ الشراء لتطبيق الخصم', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='الحد الأدنى للشراء')),
                ('min_quantity', models.PositiveIntegerField(blank=True, help_text='الحد الأدنى لكمية المنتجات', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='الحد الأدنى للكمية')),
                ('max_uses', models.PositiveIntegerField(blank=True, help_text='عدد مرات الاستخدام المسموح (اختياري)', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='الحد الأقصى للاستخدام')),
                ('max_uses_per_user', models.PositiveIntegerField(blank=True, help_text='عدد مرات الاستخدام لكل مستخدم (اختياري)', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='الحد الأقصى للاستخدام لكل مستخدم')),
                ('buy_quantity', models.PositiveIntegerField(blank=True, help_text='كمية المنتجات المطلوب شراؤها', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='كمية الشراء')),
                ('get_quantity', models.PositiveIntegerField(blank=True, help_text='كمية المنتجات المجانية', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='كمية الحصول')),
                ('get_discount_percentage', models.DecimalField(blank=True, decimal_places=2, default=100, help_text='نسبة الخصم على المنتجات المجانية (100% = مجاني)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='نسبة خصم المنتجات المجانية')),
                ('is_active', models.BooleanField(default=True, help_text='تفعيل/إلغاء تفعيل الخصم', verbose_name='نشط')),
                ('is_stackable', models.BooleanField(default=False, help_text='يمكن تجميعه مع خصومات أخرى', verbose_name='قابل للتجميع')),
                ('requires_coupon_code', models.BooleanField(default=False, help_text='العميل يجب أن يدخل كود الخصم', verbose_name='يتطلب كود خصم')),
                ('priority', models.PositiveIntegerField(default=0, help_text='أولوية تطبيق الخصم (الأعلى أولاً)', verbose_name='الأولوية')),
                ('used_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='عدد مرات الاستخدام')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discounts', to='products.category', verbose_name='الفئة')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_discounts', to=settings.AUTH_USER_MODEL, verbose_name='أنشئ بواسطة')),
                ('products', models.ManyToManyField(blank=True, related_name='discounts', to='products.product', verbose_name='المنتجات')),
            ],
            options={
                'verbose_name': 'خصم منتج',
                'verbose_name_plural': 'خصومات المنتجات',
                'ordering': ['-priority', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='DiscountUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True, verbose_name='مفتاح الجلسة')),
                ('discount_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='مبلغ الخصم')),
                ('original_amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='المبلغ الأصلي')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discount_usages', to='orders.order', verbose_name='الطلب')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discount_usages', to=settings.AUTH_USER_MODEL, verbose_name='المستخدم')),
                ('discount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_records', to='products.productdiscount', verbose_name='الخصم')),
            ],
            options={
                'verbose_name': 'استخدام خصم',
                'verbose_name_plural': 'استخدامات الخصومات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('question', models.TextField(validators=[django.core.validators.MinLengthValidator(10)], verbose_name='السؤال')),
                ('answer', models.TextField(blank=True, verbose_name='الإجابة')),
                ('is_answered', models.BooleanField(default=False, verbose_name='تم الرد')),
                ('is_public', models.BooleanField(default=True, verbose_name='سؤال عام')),
                ('is_featured', models.BooleanField(default=False, verbose_name='سؤال مميز')),
                ('answered_at', models.DateTimeField(blank=True, null=True, verbose_name='تاريخ الإجابة')),
                ('helpful_votes', models.PositiveIntegerField(default=0, verbose_name='أصوات مفيدة')),
                ('answered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='answered_questions', to=settings.AUTH_USER_MODEL, verbose_name='أجاب عليه')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='products.product', verbose_name='المنتج')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_questions', to=settings.AUTH_USER_MODEL, verbose_name='المستخدم')),
            ],
            options={
                'verbose_name': 'سؤال منتج',
                'verbose_name_plural': 'أسئلة المنتجات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('rating', models.PositiveSmallIntegerField(help_text='تقييم من 1 إلى 5 نجوم', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='التقييم')),
                ('title', models.CharField(blank=True, help_text='عنوان مختصر للمراجعة', max_length=200, verbose_name='عنوان المراجعة')),
                ('content', models.TextField(help_text='نص المراجعة - على الأقل 10 أحرف', validators=[django.core.validators.MinLengthValidator(10)], verbose_name='محتوى المراجعة')),
                ('image', models.ImageField(blank=True, help_text='صورة اختيارية مع المراجعة', null=True, upload_to=products.models.upload_review_image, verbose_name='صورة المراجعة')),
                ('is_approved', models.BooleanField(default=False, verbose_name='معتمد')),
                ('is_featured', models.BooleanField(default=False, verbose_name='مراجعة مميزة')),
                ('helpful_votes', models.PositiveIntegerField(default=0, verbose_name='أصوات مفيدة')),
                ('unhelpful_votes', models.PositiveIntegerField(default=0, verbose_name='أصوات غير مفيدة')),
                ('report_count', models.PositiveIntegerField(default=0, verbose_name='عدد البلاغات')),
                ('is_spam', models.BooleanField(default=False, verbose_name='رسالة مزعجة')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='عنوان IP')),
                ('user_agent', models.CharField(blank=True, max_length=500, verbose_name='معرف المتصفح')),
                ('quality_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='تقييم الجودة')),
                ('value_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='تقييم القيمة')),
                ('delivery_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='تقييم التوصيل')),
                ('recommend', models.BooleanField(default=True, verbose_name='يوصي بالمنتج')),
                ('purchase_date', models.DateField(blank=True, null=True, verbose_name='تاريخ الشراء')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='تاريخ الاعتماد')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_reviews', to=settings.AUTH_USER_MODEL, verbose_name='اعتمد بواسطة')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='products.product', verbose_name='المنتج')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_reviews', to=settings.AUTH_USER_MODEL, verbose_name='المستخدم')),
            ],
            options={
                'verbose_name': 'مراجعة منتج',
                'verbose_name_plural': 'مراجعات المنتجات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('subscription_type', models.CharField(choices=[('price_drop', 'انخفاض السعر'), ('back_in_stock', 'العودة للمخزون'), ('new_review', 'مراجعة جديدة'), ('question_answered', 'إجابة سؤال')], max_length=20, verbose_name='نوع الاشتراك')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='تنبيهات البريد')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='تنبيهات الرسائل')),
                ('target_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='السعر المستهدف')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='products.product', verbose_name='المنتج')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_subscriptions', to=settings.AUTH_USER_MODEL, verbose_name='المستخدم')),
            ],
            options={
                'verbose_name': 'اشتراك منتج',
                'verbose_name_plural': 'اشتراكات المنتجات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('name', models.CharField(help_text='مثل: أحمر، كبير، 64 جيجا', max_length=200, verbose_name='اسم المتغير')),
                ('sku', models.CharField(help_text='رقم فريد للمتغير', max_length=100, unique=True, verbose_name='رقم المتغير')),
                ('attributes', models.JSONField(default=dict, help_text='خصائص المتغير مثل اللون، المقاس، الذاكرة', verbose_name='الخصائص')),
                ('base_price', models.DecimalField(blank=True, decimal_places=2, help_text='السعر الخاص بهذا المتغير (اختياري)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='السعر الأساسي')),
                ('stock_quantity', models.PositiveIntegerField(default=0, verbose_name='الكمية المتوفرة')),
                ('reserved_quantity', models.PositiveIntegerField(default=0, verbose_name='الكمية المحجوزة')),
                ('track_inventory', models.BooleanField(default=True, verbose_name='تتبع المخزون')),
                ('weight', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))], verbose_name='الوزن (كجم)')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('is_default', models.BooleanField(default=False, verbose_name='متغير افتراضي')),
                ('sort_order', models.IntegerField(default=0, verbose_name='الترتيب')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.product', verbose_name='المنتج')),
            ],
            options={
                'verbose_name': 'متغير منتج',
                'verbose_name_plural': 'متغيرات المنتجات',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('image', models.ImageField(upload_to=products.models.upload_product_image, verbose_name='الصورة')),
                ('alt_text', models.CharField(blank=True, max_length=200, verbose_name='النص البديل')),
                ('caption', models.CharField(blank=True, max_length=200, verbose_name='التسمية التوضيحية')),
                ('is_primary', models.BooleanField(default=False, verbose_name='صورة رئيسية')),
                ('is_360', models.BooleanField(default=False, verbose_name='صورة 360 درجة')),
                ('sort_order', models.IntegerField(default=0, verbose_name='الترتيب')),
                ('image_thumbnail', models.ImageField(blank=True, null=True, upload_to=products.models.upload_product_image, verbose_name='صورة مصغرة')),
                ('image_medium', models.ImageField(blank=True, null=True, upload_to=products.models.upload_product_image, verbose_name='صورة متوسطة')),
                ('color_code', models.CharField(blank=True, max_length=7, verbose_name='كود اللون')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.product', verbose_name='المنتج')),
                ('variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='products.productvariant', verbose_name='المتغير')),
            ],
            options={
                'verbose_name': 'صورة منتج',
                'verbose_name_plural': 'صور المنتجات',
                'ordering': ['sort_order', '-is_primary'],
            },
        ),
        migrations.CreateModel(
            name='ProductViewHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True, verbose_name='مفتاح الجلسة')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='عنوان IP')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='view_history', to='products.product', verbose_name='المنتج')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='viewed_products', to=settings.AUTH_USER_MODEL, verbose_name='المستخدم')),
            ],
            options={
                'verbose_name': 'تاريخ المشاهدة',
                'verbose_name_plural': 'تاريخ المشاهدات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='اسم الوسم')),
                ('slug', models.SlugField(allow_unicode=True, unique=True, verbose_name='معرف URL')),
                ('description', models.TextField(blank=True, verbose_name='الوصف')),
                ('color', models.CharField(blank=True, max_length=7, verbose_name='اللون')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='الأيقونة')),
                ('is_featured', models.BooleanField(default=False, verbose_name='مميز')),
                ('is_active', models.BooleanField(default=True, verbose_name='نشط')),
                ('products_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='عدد المنتجات')),
                ('usage_count', models.PositiveIntegerField(default=0, editable=False, verbose_name='مرات الاستخدام')),
            ],
            options={
                'verbose_name': 'وسم',
                'verbose_name_plural': 'الوسوم',
                'ordering': ['-usage_count', 'name'],
                'indexes': [models.Index(fields=['slug'], name='products_ta_slug_d1be68_idx'), models.Index(fields=['is_active', 'is_featured'], name='products_ta_is_acti_16dc8c_idx'), models.Index(fields=['usage_count'], name='products_ta_usage_c_3f6e62_idx')],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='products', to='products.tag', verbose_name='الوسوم'),
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='تاريخ الإنشاء')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='تاريخ التحديث')),
                ('notes', models.TextField(blank=True, help_text='ملاحظات شخصية حول المنتج', verbose_name='ملاحظات')),
                ('notify_on_sale', models.BooleanField(default=True, verbose_name='تنبيه عند الخصم')),
                ('notify_on_restock', models.BooleanField(default=True, verbose_name='تنبيه عند التوفر')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlisted_by', to='products.product', verbose_name='المنتج')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlists', to=settings.AUTH_USER_MODEL, verbose_name='المستخدم')),
                ('variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='products.productvariant', verbose_name='المتغير')),
            ],
            options={
                'verbose_name': 'قائمة أمنيات',
                'verbose_name_plural': 'قوائم الأمنيات',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['slug'], name='products_br_slug_d4d839_idx'),
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['is_active', 'is_featured'], name='products_br_is_acti_e09143_idx'),
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['country'], name='products_br_country_3f0df3_idx'),
        ),
        migrations.AddIndex(
            model_name='brand',
            index=models.Index(fields=['rating'], name='products_br_rating_bc4f41_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['slug'], name='products_ca_slug_da4386_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent', 'is_active'], name='products_ca_parent__1cafc9_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['is_active', 'is_featured'], name='products_ca_is_acti_60a61c_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['level'], name='products_ca_level_e171a7_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['sort_order'], name='products_ca_sort_or_c50e68_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['created_at'], name='products_ca_created_c2504d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='category',
            unique_together={('parent', 'name')},
        ),
        migrations.AddIndex(
            model_name='productattribute',
            index=models.Index(fields=['slug'], name='products_pr_slug_7c8b9f_idx'),
        ),
        migrations.AddIndex(
            model_name='productattribute',
            index=models.Index(fields=['attribute_type'], name='products_pr_attribu_3420fe_idx'),
        ),
        migrations.AddIndex(
            model_name='productattributevalue',
            index=models.Index(fields=['product', 'attribute'], name='products_pr_product_c00cf1_idx'),
        ),
        migrations.AddIndex(
            model_name='productattributevalue',
            index=models.Index(fields=['attribute', 'value'], name='products_pr_attribu_99b421_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productattributevalue',
            unique_together={('product', 'attribute')},
        ),
        migrations.AddIndex(
            model_name='productcomparison',
            index=models.Index(fields=['session_key'], name='products_pr_session_2f1987_idx'),
        ),
        migrations.AddIndex(
            model_name='productcomparison',
            index=models.Index(fields=['user'], name='products_pr_user_id_92283d_idx'),
        ),
        migrations.AddIndex(
            model_name='productdiscount',
            index=models.Index(fields=['code'], name='products_pr_code_6c85ea_idx'),
        ),
        migrations.AddIndex(
            model_name='productdiscount',
            index=models.Index(fields=['start_date', 'end_date'], name='products_pr_start_d_89c63b_idx'),
        ),
        migrations.AddIndex(
            model_name='productdiscount',
            index=models.Index(fields=['is_active'], name='products_pr_is_acti_4141fb_idx'),
        ),
        migrations.AddIndex(
            model_name='productdiscount',
            index=models.Index(fields=['application_type'], name='products_pr_applica_14168a_idx'),
        ),
        migrations.AddIndex(
            model_name='productdiscount',
            index=models.Index(fields=['priority'], name='products_pr_priorit_9be6b2_idx'),
        ),
        migrations.AddIndex(
            model_name='discountusage',
            index=models.Index(fields=['discount', 'user'], name='products_di_discoun_5043ff_idx'),
        ),
        migrations.AddIndex(
            model_name='discountusage',
            index=models.Index(fields=['session_key'], name='products_di_session_11a1a6_idx'),
        ),
        migrations.AddIndex(
            model_name='discountusage',
            index=models.Index(fields=['created_at'], name='products_di_created_2c8aa6_idx'),
        ),
        migrations.AddIndex(
            model_name='productquestion',
            index=models.Index(fields=['product', 'is_public'], name='products_pr_product_505f62_idx'),
        ),
        migrations.AddIndex(
            model_name='productquestion',
            index=models.Index(fields=['user'], name='products_pr_user_id_3574ae_idx'),
        ),
        migrations.AddIndex(
            model_name='productquestion',
            index=models.Index(fields=['is_answered'], name='products_pr_is_answ_094386_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['product', 'is_approved'], name='products_pr_product_160d92_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['user'], name='products_pr_user_id_c2c9ad_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['rating'], name='products_pr_rating_0e31b2_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['is_approved', 'created_at'], name='products_pr_is_appr_d06a3f_idx'),
        ),
        migrations.AddIndex(
            model_name='productreview',
            index=models.Index(fields=['helpful_votes'], name='products_pr_helpful_f934d7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productreview',
            unique_together={('product', 'user')},
        ),
        migrations.AddIndex(
            model_name='productsubscription',
            index=models.Index(fields=['user', 'is_active'], name='products_pr_user_id_f3771f_idx'),
        ),
        migrations.AddIndex(
            model_name='productsubscription',
            index=models.Index(fields=['product', 'subscription_type'], name='products_pr_product_b053d9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productsubscription',
            unique_together={('user', 'product', 'subscription_type')},
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'is_active'], name='products_pr_product_66459e_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['sku'], name='products_pr_sku_dcab68_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productvariant',
            unique_together={('product', 'name')},
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product', 'is_primary'], name='products_pr_product_1b7905_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['variant'], name='products_pr_variant_4f60d9_idx'),
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['sort_order'], name='products_pr_sort_or_a10dc5_idx'),
        ),
        migrations.AddIndex(
            model_name='productviewhistory',
            index=models.Index(fields=['user', 'created_at'], name='products_pr_user_id_e6c0f6_idx'),
        ),
        migrations.AddIndex(
            model_name='productviewhistory',
            index=models.Index(fields=['session_key', 'created_at'], name='products_pr_session_e9b3cb_idx'),
        ),
        migrations.AddIndex(
            model_name='productviewhistory',
            index=models.Index(fields=['product'], name='products_pr_product_a2a463_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['slug'], name='products_pr_slug_3edc0c_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['sku'], name='products_pr_sku_ca0cdc_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'is_active'], name='products_pr_status_c4a457_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', 'brand'], name='products_pr_categor_1e5c3d_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['-sales_count'], name='products_pr_sales_c_6796bf_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['-views_count'], name='products_pr_views_c_7a5fbb_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['barcode'], name='products_pr_barcode_e44f4f_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['created_at'], name='products_pr_created_52f0d7_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['is_featured', 'featured_until'], name='products_pr_is_feat_f4b061_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['stock_status'], name='products_pr_stock_s_5ad318_idx'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('base_price__gt', 0)), name='positive_base_price'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('stock_quantity__gte', 0)), name='non_negative_stock'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('reserved_quantity__lte', models.F('stock_quantity'))), name='reserved_not_exceed_stock'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['user', 'created_at'], name='products_wi_user_id_ae095a_idx'),
        ),
        migrations.AddIndex(
            model_name='wishlist',
            index=models.Index(fields=['product'], name='products_wi_product_4c3cee_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='wishlist',
            unique_together={('user', 'product')},
        ),
    ]
